#!/bin/bash

function help {
	echo -e "\n"
	echo -e "\t\033[34;1mcomputerState.sh \e[0m: allows you to know the computer state.
	\e[1mOPTIONS\e[0m :
	-h : \tasks for help.
	-s : \tprints information about the system and the user.
	-r : \tprints the state of the resources.
	-d : \ttells if there has been critical errors during boot."
	echo -e "\n"
}


clear

while getopts ":hsrd" option
do
	case ${option} in
		h)
			help
			exit 0
		;;
		s)			
			computerName=$(uname -n)
			os=$(lsb_release -ds)
			lastKernelUpdate=$(uname -v | cut -d " " -f 4,5,8)
			echo -e "\033[1mInfo on the computer $computerName :\e[0m"
			echo -e "\tLogged user : $(whoami)"
			echo -e "\tOS installed : $(lsb_release -ds)"
			echo -e "\tLast kernel update : $lastKernelUpdate"
		;;
		r)	
			echo -e "\033[1mState of RAM and SWAP :\e[0m"
			stateRAM=$(free | grep Mem | sed "s/  */;/g")
			stateSWAP=$(free |grep Partition | sed "s/  */;/g")
			totalRAM=$(echo $stateRAM | cut -d ';' -f2)
			usedRAM=$(echo $stateRAM | cut -d ';' -f3)
			totalSWAP=$(echo $stateSWAP | cut -d ';' -f3)
			usedSWAP=$(echo $stateSWAP | cut -d ";" -f4)
			totalRAM=$(echo "scale=2;$totalRAM/1000000" | bc -l)
			totalSWAP=$(echo "scale=2;$totalSWAP/1000000" | bc -l)
			usedRAM=$(echo "scale=2;$usedRAM/1000000" |bc -l)
			usedSWAP=$(echo "scale=2;$usedSWAP/1000000" | bc -l)
			echo -e "\t\033[34mRAM :\e[0m \tTotal : $totalRAM Go, used : $usedRAM Go."
			percentUsageRAM=$(echo "scale=2;100*($usedRAM/$totalRAM)" | bc -l)
			echo -e "\tRAM is used up to $percentUsageRAM %"
			echo -e "\t\033[34mSWAP :\e[0m \tTotal : $totalSWAP Go, used : $usedSWAP Go."
			percentUsageSWAP=$(echo "scale=2;100*($usedSWAP/$totalSWAP)" | bc -l)
			echo -e "\tSWAP is used up to $percentUsageSWAP %"
		;;
		d)
			bootCritError=$(journalctl -xb -p crit | grep -c "No entries")

			if [ $bootCritError -eq 1 ] 
			then
				echo "There was no critical errors during boot."
			else
				echo "Somme critical errors occured during boot. Please, check the journal (journalctl -xb -p crit)."
			fi
		;;
		\?)
			echo "I don't know what to do with [$OPTARG]. Please, ask for help."
			exit 1
		;;
	esac
done

